# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
services:
  - docker:19.03.7-dind

stages:
  - build jar
  
  #- build and push docker image

  - deploy

  - update-production
  
build:
  image: maven:3.6.3-jdk-11-slim
  
  stage: build jar
  
  # before_script:

    # - source .${CI_COMMIT_REF_NAME}.env
  
  script:

    - mvn clean mvn package -B -e -Dspring.profiles.active=$SPRING_ACTIVE_PROFILE
  
  artifacts:

     paths:

       - target/*.jar
  
# docker build:

#   image: docker:stable
  
#   stage: build and push docker image
  
#   before_script:

#     - source .${CI_COMMIT_REF_NAME}.env
  
#   script:

#     - docker build --build-arg SPRING_ACTIVE_PROFILE=$SPRING_ACTIVE_PROFILE -t $DOCKER_REPO .
#    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD docker.io
#    - docker push $DOCKER_REPO


deploy-job:      # This job runs in the deploy stage.
  image: docker:latest
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  services:
        - name: docker:dind
  script:
    - echo "Deploying application..."
    - docker build -t registry.gitlab.com/arrivall/core-framework . -f Dockerfile
    - echo "Login to gitlab..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "Pushing to gitlab..."
    - docker push registry.gitlab.com/arrivall/core-framework
    - echo "Application successfully deployed."
#build:
#  stage: build
#  when: manual
#  script:
#    - mvn $MAVEN_CLI_OPTS deploy

#image: node:16-alpine

#stages:
#  - update-production

deploy:
  stage: update-production
  only:
    - master
  script:
    - npm i -g @liara/cli@3
    - export http_proxy=http://proxy.liara.ir:6666
    - liara deploy --app core-frm --api-token $TOKEN --detach
